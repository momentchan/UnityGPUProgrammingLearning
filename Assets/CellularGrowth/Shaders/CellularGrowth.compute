// Particles
#pragma kernel InitParticles
#pragma kernel EmitParticles
#pragma kernel UpdateParticles
#pragma kernel GetDividableParticles
#pragma kernel DivideParticles

// Edges
#pragma kernel InitEdges
#pragma kernel UpdateEdges
#pragma kernel SpringEdges
#pragma kernel GetDividableEdges
#pragma kernel DivideUnconnectedParticles
#pragma kernel DivideEdgesClosed
#pragma kernel DivideEdgesBranch

#define SIMULATION_BLOCK_SIZE 128

#include "../../Common/Libs/Random.cginc"
#include "Particle.cginc"
#include "Edge.cginc"
#include "Common.cginc"
#include "ParticleFunc.cginc"
#include "EdgeFunc.cginc"

//////////////////////////////////////////////////////////////////////
// Particle Kernels
//////////////////////////////////////////////////////////////////////
[numthreads(SIMULATION_BLOCK_SIZE,1,1)]
void InitParticles(uint3 id : SV_DispatchThreadID)
{
	uint idx = id.x;

	uint count, stride;
	_Particles.GetDimensions(count, stride);
	if (idx >= count)
		return;

	Particle p = create();
	p.alive = false;
	_Particles[idx] = p;

	// Add inactive idx to pool buffer
	_ParticlePoolAppend.Append(idx);
}

[numthreads(SIMULATION_BLOCK_SIZE, 1, 1)]
void EmitParticles(uint3 id : SV_DispatchThreadID)
{
	if (id.x >= (uint)_EmitCount)
		return;

	uint idx = _ParticlePoolConsume.Consume();

	Particle p = create();

	float2 offset = random_point_on_circle(id.xx + float2(0, _Time));
	p.position = _EmitPoint.xy + offset;
	p.radius = nrand(id.xx + float2(_Time, 0));

	_Particles[idx] = p;
}

[numthreads(SIMULATION_BLOCK_SIZE, 1, 1)]
void UpdateParticles(uint3 id : SV_DispatchThreadID)
{
	uint idx = id.x;

	uint count, stride;
	_ParticlesRead.GetDimensions(count, stride);
	if (idx >= count)
		return;

	Particle p = _ParticlesRead[idx];

	if (p.alive) {
		// Grow
		p.radius = min(p.threshold, p.radius + _DT * _Grow * p.radius);

		// Repulsion
		for (uint i = 0; i < count; i++) {
			Particle other = _ParticlesRead[i];

			if (i == idx || !other.alive) 
				continue;

			float2 dir = p.position - other.position;
			float l = length(dir);
			float r = (p.radius + other.radius) * _Repulsion;
			if (l < r) {
				dir += random_point_on_circle(p.position + float2(i, idx)) * step(l, 0.0001);
				p.velocity += normalize(dir) * (r - l);
			}
		}

		float vl = length(p.velocity);
		if (vl > 0) {
			p.position += normalize(p.velocity) * min(vl, _Limit) * _DT;
			p.velocity =  normalize(p.velocity) * min(vl * _Drag, _Limit);
		}
		else {
			p.velocity = (float2)0;
		}
	}
	_Particles[idx] = p;
}

[numthreads(SIMULATION_BLOCK_SIZE, 1, 1)]
void GetDividableParticles(uint3 id : SV_DispatchThreadID)
{
	uint idx = id.x;

	uint count, stride;
	_Particles.GetDimensions(count, stride);
	if (idx >= count)
		return;

	Particle p = _Particles[idx];

	if (p.alive && is_dividable_particle(p, idx)) {
		_DividablePoolAppend.Append(idx);
	}
}

[numthreads(SIMULATION_BLOCK_SIZE, 1, 1)]
void DivideParticles(uint3 id : SV_DispatchThreadID)
{
	if (id.x >= _DivideCount)
		return;

	uint idx = _DividablePoolConsume.Consume();
	divide_particle(idx);
}

//////////////////////////////////////////////////////////////////////
// Edges Kernels
//////////////////////////////////////////////////////////////////////
[numthreads(SIMULATION_BLOCK_SIZE, 1, 1)]
void InitEdges(uint3 id : SV_DispatchThreadID)
{
	uint idx = id.x;

	uint count, stride;
	_Edges.GetDimensions(count, stride);
	if (idx >= count)
		return;

	_Edges[idx].alive = false;

	// Add inactive idx to pool buffer
	_EdgePoolAppend.Append(idx);
}

[numthreads(SIMULATION_BLOCK_SIZE, 1, 1)]
void UpdateEdges(uint3 id : SV_DispatchThreadID)
{
	uint idx = id.x;

	uint count, stride;
	_Edges.GetDimensions(count, stride);
	if (idx >= count)
		return;

	Edge e = _Edges[idx];

	e.force = float2(0, 0);

	if (!e.alive) {
		_Edges[idx] = e;
		return;
	}

	Particle pa = _Particles[e.a];
	Particle pb = _Particles[e.b];
	if (!pa.alive || !pb.alive) {
		_Edges[idx] = e;
		return;
	}

	// apply force if two particles are too far or too close
	float2 dir = pa.position - pb.position;
	float r = pa.radius + pb.radius;
	float len = length(dir);
	
	if (abs(len - r) > 0) {
		float l = (len - r) / r;
		float2 f = normalize(dir) * l * _Spring;
		e.force = f;
	}

	_Edges[idx] = e;
}

[numthreads(SIMULATION_BLOCK_SIZE, 1, 1)]
void SpringEdges(uint3 id : SV_DispatchThreadID)
{
	uint idx = id.x;

	uint count, stride;
	_Particles.GetDimensions(count, stride);
	if (idx >= count)
		return;

	Particle p = _Particles[idx];
	if (!p.alive || p.links == 0)
		return;

	// reduce spring force by the # of links
	float dif = 1.0 / p.links;
	
	int iidx = (int)idx;

	_Edges.GetDimensions(count, stride);

	for (uint i = 0; i < count; i++) {
		Edge e = _Edges[i];
		if (!e.alive)
			continue;

		if (e.a == iidx) {
			p.velocity -= e.force * dif;
		}
		if (e.b == iidx) {
			p.velocity += e.force * dif;
		}
	}
	_Particles[idx] = p;
}

[numthreads(SIMULATION_BLOCK_SIZE, 1, 1)]
void GetDividableEdges(uint3 id : SV_DispatchThreadID)
{
	uint idx = id.x;

	uint count, stride;
	_Edges.GetDimensions(count, stride);
	if (idx >= count)
		return;

	Edge e = _Edges[idx];

	if (e.alive && is_dividable_edge(e, idx)) {
		_DividablePoolAppend.Append(idx);
	}
}

[numthreads(SIMULATION_BLOCK_SIZE, 1, 1)]
void DivideUnconnectedParticles(uint3 id : SV_DispatchThreadID)
{
	uint idx = id.x;

	uint count, stride;
	_Particles.GetDimensions(count, stride);
	if (idx >= count)
		return;

	Particle parent = _Particles[idx];

	if (!parent.alive || parent.links > 0)
		return;

	uint cidx = divide_particle(idx);

	connect(idx, cidx);
}

[numthreads(SIMULATION_BLOCK_SIZE, 1, 1)]
void DivideEdgesClosed(uint3 id : SV_DispatchThreadID)
{
	if (id.x >= _DivideCount)
		return;

	uint idx = _DividablePoolConsume.Consume();
	divide_edge_closed(idx);
}

[numthreads(SIMULATION_BLOCK_SIZE, 1, 1)]
void DivideEdgesBranch(uint3 id : SV_DispatchThreadID)
{
	if (id.x >= _DivideCount)
		return;

	uint idx = _DividablePoolConsume.Consume();
	divide_edge_branch(idx);
}