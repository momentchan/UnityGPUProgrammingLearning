#pragma kernel Init
#pragma kernel Emit
#pragma kernel Update

#define SIMULATION_BLOCK_SIZE 128
#include "Particle.cginc"
#include "../../Common/Libs/Random.cginc"

StructuredBuffer<Particle> _ParticlesRead;
RWStructuredBuffer<Particle> _Particles;
AppendStructuredBuffer<uint> _ParticlePoolAppend;
ConsumeStructuredBuffer<uint> _ParticlePoolConsume;

float _Time;
float _DT;

float _Grow;
float _Drag;
float _Limit;
float _Repulsion;

float2 _EmitPoint;
int _EmitCount;


Particle create() {
	Particle p;
	p.position = (float2)0;
	p.velocity = (float2)0;
	p.radius = p.threshold = 1;
	p.links = 0;
	p.alive = true;
	return p;
}


[numthreads(SIMULATION_BLOCK_SIZE,1,1)]
void Init (uint3 id : SV_DispatchThreadID)
{
	uint idx = id.x;

	uint count, stride;
	_Particles.GetDimensions(count, stride);
	if (idx > count)
		return;

	Particle p = create();
	p.alive = false;
	_Particles[idx] = p;

	_ParticlePoolAppend.Append(idx);
}

[numthreads(SIMULATION_BLOCK_SIZE, 1, 1)]
void Emit(uint3 id : SV_DispatchThreadID)
{
	if (id.x >= (uint)_EmitCount)
		return;

	uint idx = _ParticlePoolConsume.Consume();

	Particle p = create();

	float2 offset = random_point_on_circle(id.xx + float2(0, _Time));
	p.position = _EmitPoint.xy + offset;
	p.radius = nrand(id.xx + float2(_Time, 0));

	_Particles[idx] = p;
}

[numthreads(SIMULATION_BLOCK_SIZE, 1, 1)]
void Update(uint3 id : SV_DispatchThreadID) 
{
	uint idx = id.x;

	uint count, stride;
	_ParticlesRead.GetDimensions(count, stride);
	if (idx > count)
		return;

	Particle p = _ParticlesRead[idx];

	if (p.alive) {
		// Grow
		p.radius = min(p.threshold, p.radius + _DT * _Grow * p.radius);

		// Repulsion
		for (uint i = 0; i < count; i++) {
			Particle other = _ParticlesRead[i];

			if (i == idx || !other.alive) 
				continue;

			float2 dir = p.position - other.position;
			float l = length(dir);
			float r = (p.radius + other.radius) * _Repulsion;
			if (l < r) {
				dir += random_point_on_circle(p.position + float2(i, idx)) * step(l, 0.0001);
				p.velocity += normalize(dir) * (r - l);
			}
		}

		float vl = length(p.velocity);
		if (vl > 0) {
			p.position += normalize(p.velocity) * min(vl, _Limit) * _DT;
			p.velocity =  normalize(p.velocity) * min(vl * _Drag, _Limit);
		}
		else {
			p.velocity = (float2)0;
		}
	}
	_Particles[idx] = p;
}