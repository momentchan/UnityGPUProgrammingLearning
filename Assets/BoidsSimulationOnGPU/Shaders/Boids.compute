#pragma kernel ForceCS
#pragma kernel IntegrateCS
#define SIMULATION_BLOCK_SIZE 256

struct BoidData {
    float3 velocity;
    float3 position;
};

StructuredBuffer<float3>     _BoidForceBufferRead;
RWStructuredBuffer<float3>   _BoidForceBufferWrite;
StructuredBuffer<BoidData>   _BoidDataBufferRead;
RWStructuredBuffer<BoidData> _BoidDataBufferWrite;

float _DeltaTime;

int _MaxBoidObjectNum;

float _CohesionNeighborhoodRadius;
float _AlignmentNeighborhoodRadius;
float _SeparateNeighborhoodRadius;

float _CohesionWeight;
float _AlignmentWeight;
float _SeparateWeight;

float _MaxSpeed;
float _MaxSteerForce;

float _AvoidWallWeight;
float3 _WallCenter;
float3 _WallSize;

float3 limit(float3 vec, float max) {
    float length = sqrt(dot(vec, vec));
    return length > max && length > 0 ? vec * max / length : vec;
}

float3 avoidWall(float3 position) {
    float3 wc = _WallCenter;
    float3 ws = _WallSize;

    float3 acc = float3(0, 0, 0);

    acc.x = position.x < wc.x - ws.x * 0.5 ? acc.x + 1.0 : acc.x;
    acc.x = position.x > wc.x + ws.x * 0.5 ? acc.x - 1.0 : acc.x;

    acc.y = position.y < wc.y - ws.y * 0.5 ? acc.y + 1.0 : acc.y;
    acc.y = position.y > wc.y + ws.y * 0.5 ? acc.y - 1.0 : acc.y;

    acc.z = position.z < wc.z - ws.z * 0.5 ? acc.z + 1.0 : acc.z;
    acc.z = position.z > wc.z + ws.z * 0.5 ? acc.z - 1.0 : acc.z;

    return acc;
}


groupshared BoidData boid_data[SIMULATION_BLOCK_SIZE];

[numthreads(SIMULATION_BLOCK_SIZE,1,1)]
void ForceCS (uint3 DTid : SV_DispatchThreadID, 
              uint GI : SV_GroupIndex) // id inside group in one dimenstion range : 0 ~ 255
{
    const unsigned int P_ID = DTid.x;

    float3 P_position = _BoidDataBufferRead[P_ID].position;
    float3 P_velocity = _BoidDataBufferRead[P_ID].velocity;
    float3 force = (float3)0.0;

    float3 sepPosSum = (float3)0.0;
    int sepCount = 0;

    float3 aliVelSum = (float3)0.0;
    int aliCount = 0;

    float3 cohPosSum = (float3)0.0;
    int cohCount = 0;

    [loop]
    for (uint N_block_ID = 0; N_block_ID < (uint)_MaxBoidObjectNum; N_block_ID += SIMULATION_BLOCK_SIZE) {
        boid_data[GI] = _BoidDataBufferRead[N_block_ID + GI];
        
        GroupMemoryBarrierWithGroupSync(); // Wait until all the threads in the group finish actions

        for (int N_tile_ID = 0; N_tile_ID < SIMULATION_BLOCK_SIZE; N_tile_ID++) {
            float3 N_position = boid_data[N_tile_ID].position;
            float3 N_velocity = boid_data[N_tile_ID].velocity;

            float3 diff = N_position - P_position;
            float dist = sqrt(dot(diff, diff));

            if (dist > 0.0 && dist < _SeparateNeighborhoodRadius) {
                float3 repulse = normalize(P_position - N_position);
                sepPosSum += repulse / dist;
                sepCount++;
            }

            if (dist > 0.0 && dist < _AlignmentNeighborhoodRadius) {
                aliVelSum += N_velocity;
                aliCount++;
            }

            if (dist > 0.0 && dist < _CohesionNeighborhoodRadius) {
                cohPosSum += N_position;
                cohCount++;
            }
        }
        GroupMemoryBarrierWithGroupSync();
    }

    float3 sepSteer = (float3)0.0;
    if (sepCount > 0) {
        sepSteer = sepPosSum / (float)sepCount;
        sepSteer = normalize(sepSteer) * _MaxSpeed;
        sepSteer = sepSteer - P_velocity;
        sepSteer = limit(sepSteer, _MaxSteerForce);
    }

    float3 aliSteer = (float3)0.0;
    if (aliCount > 0) {
        aliSteer = aliVelSum / (float)aliCount;
        aliSteer = normalize(aliSteer) * _MaxSpeed;
        aliSteer = aliSteer - P_velocity;
        aliSteer = limit(aliSteer, _MaxSteerForce);
    }

    float3 cohSteer = (float3)0.0;
    if (cohCount > 0) {
        cohPosSum = cohPosSum / (float)cohCount;
        cohSteer = cohPosSum - P_position;
        cohSteer = normalize(cohSteer) * _MaxSpeed;
        cohSteer = cohSteer - P_velocity;
        cohSteer = limit(cohSteer, _MaxSteerForce);
    }

    force += sepSteer * _SeparateWeight;
    force += aliSteer * _AlignmentWeight;
    force += cohSteer * _CohesionWeight;

    _BoidForceBufferWrite[P_ID] = force;
}

[numthreads(SIMULATION_BLOCK_SIZE, 1, 1)]
void IntegrateCS(uint3 DTid : SV_DispatchThreadID)
{
    const unsigned int P_ID = DTid.x;

    BoidData b = _BoidDataBufferWrite[P_ID];
    float3 force = _BoidForceBufferRead[P_ID];

    force += avoidWall(b.position) * _AvoidWallWeight;

    b.velocity += force * _DeltaTime;
    b.velocity = limit(b.velocity, _MaxSpeed);
    b.position += b.velocity * _DeltaTime;

    _BoidDataBufferWrite[P_ID] = b;
}