#pragma kernel Update
#include "Body.cginc"

#define SIMULATION_BLOCK_SIZE 256

int   _ParticleNumbers;
uint   _DivideLevel;
float _DeltaTime;
float _Damping;
float _SofteningSquared;

StructuredBuffer<Body>	 _ParticleBufferRead;
RWStructuredBuffer<Body> _ParticleBufferWrite;

groupshared Body sharedBody[SIMULATION_BLOCK_SIZE];

float3 ComputeBodyForce(Body body, uint GI, uint3 groupID) 
{
	float3 acc = 0;
	float3 P_position = body.position;
	float P_mass = body.mass;

	// total group count
	uint group_count = (uint)_ParticleNumbers / SIMULATION_BLOCK_SIZE;
	// group count to compute
	uint N_group_count = group_count / _DivideLevel;

	[loop]
	for (uint index = 0; index < N_group_count; index += 1) {

		int N_group_ID	  = (groupID.x + index) % group_count;			// select which group to compute
		int N_group_index = N_group_ID * SIMULATION_BLOCK_SIZE;			// selcted group in overall index
		sharedBody[GI]	  = _ParticleBufferRead[N_group_index + GI];	// store in shared buffer

		GroupMemoryBarrierWithGroupSync();

		for (int N_tile_ID = 0; N_tile_ID < SIMULATION_BLOCK_SIZE; N_tile_ID++) {	// compute force inside selected group

			float3 N_position  = sharedBody[N_tile_ID].position;
			float  N_mass      = sharedBody[N_tile_ID].mass;

			float3 diff = N_position - P_position;
			float distSqr = dot(diff, diff) + _SofteningSquared;

			float distSixth = distSqr * distSqr * distSqr;
			float invDistCube = 1.0f / sqrt(distSixth);

			float s = N_mass * invDistCube;

			acc += diff * s;
		}

		GroupMemoryBarrierWithGroupSync();
	}

	return acc;
}

[numthreads(SIMULATION_BLOCK_SIZE, 1, 1)]
void Update (uint3 DTid : SV_DispatchThreadID, 
			 uint GI : SV_GroupIndex,
			 uint3 groupID : SV_GroupID)
{
	Body body = _ParticleBufferRead[DTid.x];

	float3 force = ComputeBodyForce(body, GI, groupID);

	body.velocity += force * _DeltaTime;
	body.velocity *= _Damping;

	body.position += body.velocity * _DeltaTime;

	_ParticleBufferWrite[DTid.x] = body;
}
